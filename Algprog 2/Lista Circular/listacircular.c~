#include <stdio.h>

typedef struct cel {
  int chave;
  struct cel *prox;
} celula;


/*Imprime lista circular*/
void imprime_lista(celula *lista)
{
   celula *p;
   if(*lista==NULL) {
     prinf("Lista vazia");
   } else {
     do {
       printf("%d ", p->chave);
       p = p->prox;
     }while {p != lista}
   }

   printf("\n");
}

/* Recebe uma chave x e uma lista linear circular c e verifica se x consta em
c, devolvendo a célula em que x se encontra ou NULL em caso contrário */
celula *busca_circular(int x, celula *c) {
  celula *p, *q;
  p = c;
  p->chave = x;
  q = c->prox;
  while (q->chave != x)
    q = q->prox;
  if (q != c)
    return q;
  else
    return NULL;
}

/* Recebe uma chave y e uma lista circular c e insere y no início da lista c */
void insere_circular(int y, celula *c) {
  celula *nova;
  nova = (celula *) malloc(sizeof (celula));
  nova->chave = y;
  nova->prox = c->prox;
  c->prox = nova;
}

/* Recebe uma chave x e uma lista linear circular c e
remove a célula com chave x da lista c, caso exista */
void remove_circular(int x, celula *c) {
  celula *p, *q;
  p = c;
  p->chave = x;
  q = p->prox;
  while (q->chave != x) {
    p = q;
    q = q->prox;
  }
  if (q != c) {
    p->prox = q->prox;
    free(q);
  }
}



int main(void){
  celula *lista;

  lista = (celula *) malloc(sizeof (celula));
  lista->prox = lista;

/* Possibilidades:
  celula c, *lista;
  c.prox = &c;
  lista = &c;

  celula *lista;
  lista = NULL; 
*/


}
