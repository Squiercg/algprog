package Main;

import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;

import classes.Corredor;
import classes.Corrida;
import dao.CorredorDao;
import dao.CorridaDao;

public class Main {

	private static Scanner leitor;
	private static boolean menu_principal;
	private static boolean menu_corredores;
	private static boolean menu_corridas;
	private static CorredorDao corredordao;
	private static CorridaDao corridadao;

	public static void main(String[] args) {
		String caminho;
		File file = new File("trabalho.sqlite");
		caminho = file.getAbsolutePath().replaceAll("trabalho.sqlite", "db/trabalho.sqlite").replaceAll("\\\\", "/");
		
		try {
			corredordao = new CorredorDao(caminho);
			corridadao = new CorridaDao(caminho);
		} catch (SQLException e) {
			System.out.println("Problemas em criar coneção com banco de dados: " + e.getMessage());
		}
		
		
		leitor = new Scanner(System.in);
		int opcao;
		
		menu_principal=true;		
		while(menu_principal) {
			imprime_menu_principal();
			opcao=leitor.nextInt();
			leitor.nextLine();
			
			switch (opcao) {
			case 1:
				menu_corredores();
				break;
			case 2:
				menu_corridas();
				break;
			case 3:
				System.out.println("Fim do Programa! Beep. Beep.");
				menu_principal=false;
				break;
			default:
				System.out.println("Opção Inválida!");
			}			
		}		
		leitor.close();
	}
	
	public static void imprime_menu_principal(){
		System.out.println("Menu Principal.");
		System.out.println("Opções:");
		System.out.println("1 - Corredores");
		System.out.println("2 - Corridas");
		System.out.println("3 - Encerrar sessão");
		System.out.print("Sua Opção: ");		
	}
	
	public static void imprime_menu_corredores(){
		System.out.println("Menu Corredores");
		System.out.println("Opções:");
		System.out.println("1 - Listar Cadastros");
		System.out.println("2 - Cadastrar Corredor");
		System.out.println("3 - Modificar Cadastro");
		System.out.println("4 - Remover Cadastro");		
		System.out.println("5 - Inscrever Corredor em Corrida");
		System.out.println("6 - Voltar");
		System.out.print("Sua Opção: ");		
	}
	
	public static void imprime_menu_corridas(){
		System.out.println("Menu Corredores");
		System.out.println("Opções:");
		System.out.println("1 - Listar Corridas");
		System.out.println("2 - Cadastrar Corrida");
		System.out.println("3 - Modificar Corrida");
		System.out.println("4 - Remover Corrida");
		System.out.println("5 - Listar Modalidade");
		System.out.println("6 - Cadastrar Modalidade");
		System.out.println("7 - Modificar Modalidade");
		System.out.println("8 - Remover Modalidade");
		System.out.println("9 - Registrar modalidade em corrida");
		System.out.println("10 - Voltar");
		System.out.print("Sua Opção: ");		
	}
	
	public static void menu_corredores(){
		int opcao;
		
		menu_corredores=true;
		while(menu_corredores) {
			imprime_menu_corredores();
			opcao=leitor.nextInt();
			leitor.nextLine();
			
			switch (opcao) {
			case 1: //Listar Cadastros
				ArrayList<Corredor> lista_corredores;				
				try {
					System.out.printf("\n\n");
					lista_corredores = corredordao.all();
					System.out.println("Lista de corredores cadastrados:");
					for (Corredor pessoa : lista_corredores){
						System.out.println(pessoa);				
					}
					System.out.printf("\n\n");
					
				} catch (SQLException e) {
					System.out.println("Problemas com o banco de dados!" + e.getMessage());
				}
				break;
			case 2: //Cadastrar Corredor
				String nome, data_de_nascimento, cpf;
				
				System.out.println("Cadastro de Corredor.");
				System.out.printf("Nome: ");
				nome=leitor.nextLine();
				System.out.printf("Data de Nascimento:");
				data_de_nascimento=leitor.nextLine();
				System.out.printf("CPF: ");
				cpf=leitor.nextLine();
				
				try {
					Corredor cadastro = new Corredor(corredordao.descobre_chave_livre(),nome,data_de_nascimento,cpf);
					corredordao.insert(cadastro);					
				} catch (SQLException e) {
					System.out.println("Problemas com o banco de dados!" + e.getMessage());
				}
				
				break;
			case 3://Modificar Cadastro
				int mod, identificador;			
				
				System.out.println("O que deseja Modificar?");
				System.out.println("1 - Nome");
				System.out.println("2 - Data de nascimento");
				System.out.println("3 - CPF");
				System.out.println("4 - Voltar");
				
				mod=leitor.nextInt();
				leitor.nextLine();
				
				Corredor modificar = new Corredor();
				
				System.out.printf("Qual id do cadastro que deseja modoficar?");
				identificador=leitor.nextInt();
				leitor.nextLine();
				
				
				switch (mod) {
				case 1:
					System.out.printf("Novo Nome: ");
					modificar.setNome(leitor.nextLine());					
					try {
						if(corredordao.chave_existe(identificador)) {
							corredordao.update(modificar,identificador);
						} else {
							System.out.println("Falha na modificação, chave inexistente!");
						}
					} catch (SQLException e) {
						System.out.println("Problemas com o banco de dados!" + e.getMessage());
					}					
					break;
				case 2:
					System.out.printf("Nova Data de nascimento: ");
					modificar.setData_de_nascimento(leitor.nextLine());					
					try {
						if(corredordao.chave_existe(identificador)) {
							corredordao.update(modificar,identificador);
						} else {
							System.out.println("Falha na modificação, chave inexistente!");
						}
					} catch (SQLException e) {
						System.out.println("Problemas com o banco de dados!" + e.getMessage());
					}
					break;
				case 3:
					System.out.printf("Novo cpf: ");
					modificar.setCpf(leitor.nextLine());					
					try {
						if(corredordao.chave_existe(identificador)) {
							corredordao.update(modificar,identificador);
						} else {
							System.out.println("Falha na modificação, chave inexistente!");
						}
					} catch (SQLException e) {
						System.out.println("Problemas com o banco de dados!" + e.getMessage());
					}
					break;
				case 4:
					System.out.println("Voltando ao menu corredor");
					break;
				default:
					System.out.println("Opção Inválida!");
				}
				break;
			case 4://Remover Cadastro
				int id_remover;
				System.out.printf("Qual id do cadastro que deseja modoficar?");
				id_remover=leitor.nextInt();
				leitor.nextLine();
				try {
					if(corredordao.chave_existe(id_remover)) {
						corredordao.remove(id_remover);
					} else {
						System.out.println("Falha na remoção, chave inexistente!");
					}
				} catch (SQLException e) {
					System.out.println("Problemas com o banco de dados!" + e.getMessage());
				}
				break;
			case 5://Inscrever Corredor em Corrida
				System.out.println("5");
				break;
			case 6:
				System.out.println("Voltando ao menu principal");
				menu_corredores=false;
				break;
			default:
				System.out.println("Opção Inválida!");
			}			
		}		
	}

	public static void menu_corridas(){
		int opcao;
		
		menu_corridas=true;
		while(menu_corridas) {
			imprime_menu_corridas();
			opcao=leitor.nextInt();
			leitor.nextLine();
			
			switch (opcao) {
			case 1: //Listar Corridas
				ArrayList<Corrida> lista_corridas;				
				try {
					System.out.printf("\n\n");
					lista_corridas = corridadao.all();
					System.out.println("Lista de corridas cadastrados:");
					for (Corrida corrida : lista_corridas){
						System.out.println(corrida);				
					}
					System.out.printf("\n\n");
					
				} catch (SQLException e) {
					System.out.println("Problemas com o banco de dados!" + e.getMessage());
				}
				break;
			case 2: //Cadastrar Corrida
				System.out.println("1");
				break;
			case 3: //Modificar Corrida
				System.out.println("1");
				break;
			case 4: //Remover Corrida
				System.out.println("1");
				break;
			case 5: //Listar Modalidade
				System.out.println("1");
				break;
			case 6: //Cadastrar Modalidade
				System.out.println("1");
				break;
			case 7: //Modificar Modalidade
				System.out.println("1");
				break;
			case 8: //Remover Modalidade
				System.out.println("1");
				break;
			case 9: //Registrar modalidade em corrida
				System.out.println("1");
				break;
			case 10:
				System.out.println("Voltando ao menu principal");
				menu_corridas=false;
				break;
			default:
				System.out.println("Opção Inválida!");
			}			
		}
	}

	
}
